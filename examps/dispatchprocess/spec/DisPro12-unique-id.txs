{-
TorXakis - Model Based Testing
Copyright (c) 2015-2016 TNO and Radboud University
See license.txt
-}


-- ----------------------------------------------------------------------------------------- --
-- Dispatch Process
-- ----------------------------------------------------------------------------------------- --
-- Job Data

TYPEDEF  JobData  ::=  JobData  {  jobId          :: Int
                                ;  jobDescription :: String
                                ;  x, y           :: Int
                                }
ENDDEF


FUNCDEF  isValidJobId ( jobId :: Int )  :: Bool ::=
    ( jobId > 0 ) 
 -- /\ ( ( jobId % 2 ) == 0 )
ENDDEF

FUNCDEF  isValidJob ( jobdata :: JobData )  :: Bool ::=
    isValidJobId ( jobId ( jobdata ) )
 /\ strinre ( jobDescription(jobdata), REGEX('[A-Z][0-9]{2}[a-z]+') )
 /\ ( x(jobdata) > 0 )
 /\ ( y(jobdata) > 0 )
	   /\  ( IF (x(jobdata) < y(jobdata)) THEN
				( abs(x(jobdata) - y(jobdata)) < (100 * x(jobdata) ))
			ELSE
				( abs(x(jobdata) - y(jobdata)) < (100 * y(jobdata) ))
			FI )
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- Job Output

TYPEDEF  JobOut  ::=  JobOut  {  jobId     :: Int
                              ;  processor :: Int
                              ;  gcd       :: Int
                              }
                    | Error   {  reason :: String }
ENDDEF

TYPEDEF IntSet ::=   Empty
                   | IntSet { hd :: Int
                            ; tl :: IntSet
                            } 
ENDDEF

FUNCDEF  isValidIntSet ( set :: IntSet )  :: Bool ::=
    IF isEmpty(set)
        THEN True
        ELSE not ( contains ( hd ( set ) , tl ( set ) ) )
			 /\ isValidIntSet ( tl ( set ) )
    FI
ENDDEF

FUNCDEF  contains ( elem :: Int ; set :: IntSet )  :: Bool ::=
    IF isEmpty(set) 
        THEN False
        ELSE IF (hd(set) == elem) 
                THEN True
                ELSE contains (elem, tl(set))
             FI
    FI
ENDDEF

FUNCDEF add ( elem :: Int ; set :: IntSet )  :: IntSet ::=
    IF isEmpty(set) 
        THEN IntSet( elem, Empty )
        ELSE IF (hd(set) == elem) 
                THEN set
                ELSE IntSet( hd(set), add(elem, tl(set)) )
             FI
    FI
ENDDEF

FUNCDEF remove ( elem :: Int ; set :: IntSet )  :: IntSet ::=
    IF isEmpty(set) 
        THEN Empty
        ELSE IF (hd(set) == elem) 
                THEN tl(set)
                ELSE IntSet( hd(set), remove(elem, tl(set)) )
             FI
    FI
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- Greatest Common Divisor

FUNCDEF  gcd ( a, b :: Int ) :: Int ::=
        IF a == b THEN  a
                  ELSE  IF a > b THEN  gcd ( a - b, b )
                                 ELSE  gcd ( a, b - a )
                        FI
        FI
ENDDEF

-- ----------------------------------------------------------------------------------------- --

PROCDEF  processor [ Start :: JobData; Finish :: JobOut ] ( procnum :: Int ) ::=
             Start ? job
        >->  Finish ! JobOut ( jobId(job)
                             , procnum
                             , gcd ( x(job) , y(job) )
                             )
        >->  processor [ Start, Finish ] ( procnum )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  processors [ Start :: JobData; Finish :: JobOut ] ( procnum :: Int ) ::=
             processor [ Start, Finish ] ( procnum )
        |||
             [[ procnum > 1 ]]  =>>  processors [ Start, Finish ] ( procnum-1 )
ENDDEF

-- ----------------------------------------------------------------------------------------- --

PROCDEF  dispatcher [ Acquire :: Int ; Job , Dispatch :: JobData ] ( ) ::=
        Acquire ? jobid |
		 Job ? job [[ isValidJob(job) /\ (jobId(job) == jobid) ]]
    >-> Dispatch ! job
    >-> dispatcher [ Acquire, Job, Dispatch ]  ( )
ENDDEF

PROCDEF jobIdManager [ Acquire, Release :: Int ] ( inuse :: IntSet ) ::=
            Acquire ? jobid [[ isValidJobId (jobid) /\ not ( contains ( jobid, inuse ) ) ]] 
        >-> jobIdManager [Acquire, Release] ( add ( jobid , inuse ) )
    ##
            Release ? jobid [[ contains (jobid, inuse) ]] 
        >-> jobIdManager [Acquire, Release] ( remove ( jobid , inuse ) )
ENDDEF

PROCDEF releaser [ Finish :: JobOut ; Release :: Int ] ( ) ::=
        Finish ? jo 
    >-> Release ! jobId ( jo )
    >-> releaser [ Finish, Release ] ( )
ENDDEF

-- ----------------------------------------------------------------------------------------- --


PROCDEF mySpec [Job :: JobData; Finish :: JobOut] ( nrofProcessors :: Int ) ::=
    HIDE [ Acquire , Release :: Int ]
    IN
            jobIdManager [ Acquire , Release ] ( Empty )
        |[ Acquire , Release ]|
            HIDE  [ Job2Proc :: JobData ]
            IN
                    dispatcher [ Acquire , Job , Job2Proc ]  ( )
                |[ Job2Proc ]|
                    (
                            processors [ Job2Proc , Finish ] ( nrofProcessors )
                        |[ Finish ]|
                            releaser [ Finish, Release ] ( )
                    )
            NI
    NI
ENDDEF

CHANDEF ChanDefs ::=
    Job    :: JobData;
    Finish :: JobOut
ENDDEF

MODELDEF Model ::=
    CHAN IN    Job
    CHAN OUT   Finish

    BEHAVIOUR
        mySpec [Job, Finish] (4)
ENDDEF

PROCDEF traceWrong [Job :: JobData; Finish :: JobOut]() EXIT ::=
        Job ! JobData( 82, "N22s", 45, 78 )
    >-> Job ! JobData( 82, "L22kk", 17, 63 )
    >-> EXIT
ENDDEF

MODELDEF ModelTraceWrong ::=
    CHAN IN    Job
    CHAN OUT   Finish

    BEHAVIOUR
            mySpec [Job, Finish] (4)
        |[Job, Finish]|
            traceWrong [Job, Finish] ()
ENDDEF

PROCDEF traceRight [Job :: JobData; Finish :: JobOut]() EXIT ::=
        Job ! JobData( 82, "N22s", 45, 78 )
    >-> Finish ? o [[
					IF isJobOut(o)
					THEN (gcd(o) == 3) /\ (jobId(o) == 82)
					ELSE False
					FI
				   ]]
    >-> Job ! JobData( 82, "L22kk", 17, 63 )
    >-> Finish ? o [[
					IF isJobOut(o)
					THEN (gcd(o) == 1) /\ (jobId(o) == 82)
					ELSE False
					FI
				   ]]
    >-> EXIT
ENDDEF

MODELDEF ModelTraceRight ::=
    CHAN IN    Job
    CHAN OUT   Finish

    BEHAVIOUR
            mySpec [Job, Finish] (4)
        |[Job, Finish]|
            traceRight [Job, Finish] ()
ENDDEF


-- ----------------------------------------------------------------------------------------- --

CNECTDEF  Sut ::=
        CLIENTSOCK

        CHAN  OUT   Job                         HOST "localhost"  PORT 7890
        ENCODE      Job ? jd                    ->  ! toString(jd)
        
        CHAN  IN    Finish                      HOST "localhost"  PORT 7890
        DECODE      Finish ! fromString(s)      <-   ? s
ENDDEF
-- ----------------------------------------------------------------------------------------- --
--                                                                                           --
-- ----------------------------------------------------------------------------------------- --
