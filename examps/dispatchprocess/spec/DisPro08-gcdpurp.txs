{-
TorXakis - Model Based Testing
Copyright (c) 2015-2016 TNO and Radboud University
See license.txt
-}


-- ----------------------------------------------------------------------------------------- --
-- Dispatch Process
-- ----------------------------------------------------------------------------------------- --
-- greatest common diviser

FUNCDEF  gcd ( a, b :: Int ) :: Int ::=
        IF a == b THEN  a
                  ELSE  IF a > b THEN  gcd ( a - b, b )
                                 ELSE  gcd ( a, b - a )
                        FI
        FI
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- processor

PROCDEF  processor [ Start :: Int # Int; Finish :: Int ] ( ) ::=
             Start ?x ?y  [[ x>0, y>0 ]]
        >->  Finish ! gcd ( x, y )
        >->  processor [ Start, Finish ] ( )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  processors [ Start :: Int # Int; Finish :: Int ] ( ) ::=
             processor [ Start, Finish ] ( )
        |||
             processor [ Start, Finish ] ( )
        |||
             processor [ Start, Finish ] ( )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  dispatcher [ Job, Dispatch :: Int # Int ] ( ) ::=
             Job ?x ?y  [[ x>0, y>0 ]]
        >->  Dispatch !x !y
        >->  dispatcher [ Job, Dispatch ]  ( )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


MODELDEF Model ::=
    CHAN IN    Job   
    CHAN OUT   Finish

    BEHAVIOUR
            HIDE  [ Job2Proc :: Int # Int ]
            IN
                    (
                          dispatcher [ Job, Job2Proc ] ( )
                     |[ Job ]|
                          testPurposes [ Job ]  ( 1 )
                    )
                |[ Job2Proc ]|
                    processors [ Job2Proc, Finish] ( )
            NI
ENDDEF

-- ----------------------------------------------------------------------------------------- --

PROCDEF  testPurposes  [ Job :: Int # Int ] ( d :: Int ) ::=
             Job ?x ?y  [[ (x % d) == 0,  (y % d) == 0 ]]
        >-> 
             testPurposes [ Job ] ( d+1 )
ENDDEF

-- ----------------------------------------------------------------------------------------- --

CHANDEF Channels ::=
	Job      :: Int # Int;
	Finish   :: Int
ENDDEF

-- ----------------------------------------------------------------------------------------- --
--                                                                                           --
-- ----------------------------------------------------------------------------------------- --

