{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

PROCDEF memory [ Read, Write :: Int ] ( value :: Int ) ::=
        Read  ? input [[ input == value]]    >-> memory [Read, Write] (value)
    ##
        Write ? newValue >-> memory [Read, Write] (newValue)
ENDDEF

{-
    Defining a process to use the memory
-}
PROCDEF plus [ Read, Write :: Int ] ( n :: Int ) EXIT ::=
    Read ? value >-> Write ! (value + n) >-> EXIT
ENDDEF

PROCDEF readWrite [ Read, Write :: Int ] ( ) ::=
             plus [ Read, Write ](1)
         |||
             plus [ Read, Write ](2)
         |||
             plus [ Read, Write ](4)
     >>>
              Read ? value
         >->  Write ! 0
         >->  readWrite [ Read, Write ] ( )
ENDDEF

PROCDEF system [ Read, Write :: Int ] ( ) ::=
        memory [ Read, Write ] ( 0 )
    |[ Read, Write ]|
        readWrite [ Read, Write ] ( )
ENDDEF

{-
    Defining Channels and Model
-}
CHANDEF Channels ::=
    Read, Write, Dummy :: Int
ENDDEF

MODELDEF Model ::=
    CHAN IN Dummy
    CHAN OUT  Read, Write

    BEHAVIOUR
              system [ Read, Write ] ( )
ENDDEF

CNECTDEF  Sut ::=
    CLIENTSOCK

    CHAN OUT Dummy                   HOST "localhost"  PORT 7776
    ENCODE   Dummy ? s               -> ! toString(s)
    CHAN IN  Read                    HOST "localhost"  PORT 7777
    DECODE   Read ! fromString(s)    <- ? s
    CHAN IN  Write                   HOST "localhost"  PORT 7778
    DECODE   Write ! fromString(s)   <- ? s
ENDDEF

CNECTDEF  Sim ::=
    SERVERSOCK

    CHAN IN   Dummy                   HOST "localhost"  PORT 7776
    DECODE    Dummy ! fromString(s)   <- ? s
    CHAN OUT  Read                    HOST "localhost"  PORT 7777
    ENCODE    Read ? b                ->  ! toString(b)
    CHAN OUT  Write                   HOST "localhost"  PORT 7778
    ENCODE    Write ? b               ->  ! toString(b)
ENDDEF

