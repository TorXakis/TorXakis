{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

TYPEDEF Sex ::= Male | Female ENDDEF

TYPEDEF Person ::=
    Person { sex :: Sex 
           ; firstName, lastName :: String 
           ; dayOfBirth, monthOfBirth :: Int
           }
ENDDEF

FUNCDEF isValid_Person (p :: Person) :: Bool ::=
       strinre (firstName(p), REGEX ('[A-Z][a-z]*'))
    /\ strinre (lastName(p), REGEX ('[A-Z][a-z]*'))
    /\ (1 <= dayOfBirth(p)) /\ (dayOfBirth(p) <= 31)
    /\ (1 <= monthOfBirth(p)) /\ (monthOfBirth(p) <= 12)
ENDDEF

FUNCDEF isLuckyPerson (p :: Person; last :: Sex; n :: Int) :: Bool ::=
       ( ( sex(p) <> last ) /\ ( n >= 5 ) )                             -- change of sex after enough others?
    \/ ( at(firstName(p), 0 ) == at(lastName(p), 0 ) )                  -- same first character in first and last name?
    \/ ( dayOfBirth(p) == monthOfBirth(p) )                             -- same value for day and month of birth?
ENDDEF

PROCDEF luckyPeople [ In :: Person; Out :: Bool ] ( last :: Sex; n :: Int ) ::=
        In ? p [[ isValid_Person(p) ]] 
    >-> Out ! isLuckyPerson (p, last, n) 
    >->(
                ( [[ sex(p) == last ]] =>> luckyPeople[In,Out] ( sex(p), n+1 ) )
            ##
                ( [[ sex(p) <> last ]] =>> luckyPeople[In,Out] ( sex(p), 1 ) )
        )
ENDDEF

CHANDEF Channels ::=  In   :: Person
                    ; Out  :: Bool
ENDDEF

MODELDEF Model ::=
    CHAN IN    In
    CHAN OUT   Out

    BEHAVIOUR  
        luckyPeople[In, Out](Male,0)            -- first sex choice is arbitrary
ENDDEF


PROCDEF examples [ In :: Person; Out :: Bool ] () ::=
        In ! Person( Male, "Mickey", "Mouse", 13, 1 )
    >-> Out ! True
    >-> In ! Person( Male, "Donald", "Duck", 13, 3 )
    >-> Out ! True
    >-> In ! Person( Male, "Luuk", "Laar", 24, 12 )
    >-> Out ! True
    >-> In ! Person( Female, "Shakira", "Ripoll", 2, 2 )
    >-> Out ! True
    >-> In ! Person( Male, "Michael", "Buble", 9, 9 )
    >-> Out ! True
    >-> In ! Person( Female, "Imke", "Laar", 7, 7 )
    >-> Out ! True
    >-> In ! Person( Male, "Huey", "Duck", 17, 10 )
    >-> Out ! False
    >-> In ! Person( Male, "Dewey", "Duck", 17, 10 )
    >-> Out ! True
    >-> In ! Person( Male, "Louie", "Duck", 17, 10 )
    >-> Out ! False
    >-> In ! Person( Male, "Mickey", "Mouse", 13, 1 )
    >-> Out ! True
    >-> In ! Person( Male, "Donald", "Duck", 13, 3 )
    >-> Out ! True
    >-> In ! Person( Female, "April", "Duck", 15, 5 )
    >-> Out ! True
    >-> In ! Person( Female, "Beatrix", "Oranje", 31, 1 )
    >-> Out ! False
    >-> In ! Person( Female, "Maxima", "Zorreguieta", 17, 5 )
    >-> Out ! False
    >-> In ! Person( Female, "Amalia", "Oranje", 7, 12 )
    >-> Out ! False
    >-> In ! Person( Female, "Alexia", "Oranje", 26, 6 )
    >-> Out ! False
    >-> In ! Person( Female, "Ariane", "Oranje", 10, 4 )
    >-> Out ! False
    >-> In ! Person( Male, "Willem", "Oranje", 27, 4 )
    >-> Out ! True
ENDDEF

MODELDEF ModelExamples ::=
    CHAN IN    In 
    CHAN OUT   Out
    
    BEHAVIOUR  
            luckyPeople[In, Out](Male,0)   
        |[In,Out]|
            examples[In,Out]()
ENDDEF

CONSTDEF separator :: String ::= "@" ENDDEF

CNECTDEF  Sut ::=
    CLIENTSOCK

    CHAN  OUT  In                   HOST "localhost"  PORT 7777
    ENCODE     In  ? p              ->  ! toString(sex(p))        ++ separator ++
                                          firstName(p)            ++ separator ++
                                          lastName(p)             ++ separator ++
                                          toString(dayOfBirth(p)) ++ separator ++
                                          toString(monthOfBirth(p))

    CHAN  IN   Out                  HOST "localhost"  PORT 7777
    DECODE     Out  ! fromString(s) <-  ? s
ENDDEF

CNECTDEF  Xut ::=
    CLIENTSOCK

    CHAN  OUT  In                   HOST "localhost"  PORT 7777
    ENCODE     In  ? p              ->  ! toXml(p)
    
    CHAN  IN   Out                  HOST "localhost"  PORT 7777
    DECODE     Out  ! fromXml(s)    <-  ? s
ENDDEF

CNECTDEF  Xim ::=
    SERVERSOCK

    CHAN IN   In                    HOST "localhost"  PORT 7777
    DECODE    In ! fromXml(s)       <-  ? s

    CHAN OUT  Out                   HOST "localhost"  PORT 7777
    ENCODE    Out ? b               ->  ! toXml(b)
ENDDEF

PROCDEF increasingRows [ In :: Person ] ( length, pos :: Int; s :: Sex ) ::=
        In ? p [[ sex(p) == s]]
    >-> (
                [[pos == 1]] =>> (
                                        [[ isMale(s) ]] =>> increasingRows [In] (length, length, Female)
                                    ##
                                        [[ isFemale(s) ]] =>> increasingRows [In] (length+1, length+1, Male)
                                 )
            ##
                [[pos>1]] =>> increasingRows [In] (length, pos-1, s)
         )
ENDDEF

MODELDEF Overflow ::=
    CHAN IN    In
    CHAN OUT   Out

    BEHAVIOUR  
            increasingRows [In] (1,1,Male)
        |[In]|
            luckyPeople [In, Out] (Male,0)            -- first sex choice is arbitrary
ENDDEF