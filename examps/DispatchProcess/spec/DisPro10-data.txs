{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}


-- ----------------------------------------------------------------------------------------- --
-- Dispatch Process
-- ----------------------------------------------------------------------------------------- --
-- Job Data

TYPEDEF  JobData  ::=  JobData  {  jobId          :: Int
                                ;  jobDescription :: String
                                ;  x, y           :: Int
                                }
ENDDEF


FUNCDEF  isValidJob ( jobdata :: JobData )  :: Bool ::=
           ( jobId(jobdata) > 0 ) /\ ( ( jobId(jobdata) % 2 ) == 0 )
       /\  strinre ( jobDescription(jobdata), REGEX('[A-Z]{2}[0-9][a-z]*') )
       /\  ( x(jobdata) > 0 )
       /\  ( y(jobdata) > 0 )
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- Job Output

TYPEDEF  JobOut  ::=  JobOut  {  jobId     :: Int
                              ;  processor :: Int
                              ;  gcd       :: Int
                              }
                    | Error   {  reason :: String }
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- Greatest Common Divisor
-- https://en.wikipedia.org/wiki/Euclidean_algorithm
FUNCDEF  gcd ( a, b :: Int ) :: Int ::=
    IF b == 0 THEN  a
              ELSE  gcd (b, a % b)
    FI
ENDDEF

-- ----------------------------------------------------------------------------------------- --

PROCDEF  processor [ Start :: JobData; Finish :: JobOut ] ( procnum :: Int ) ::=
             Start ? job
        >->  Finish ! JobOut ( jobId(job)
                             , procnum
                             , gcd ( x(job) , y(job) )
                             )
        >->  processor [ Start, Finish ] ( procnum )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  processors [ Start :: JobData; Finish :: JobOut ] ( procnum :: Int ) ::=
             processor [ Start, Finish ] ( procnum )
        |||
             [[ procnum > 1 ]]  =>>  processors [ Start, Finish ] ( procnum-1 )
ENDDEF

-- ----------------------------------------------------------------------------------------- --


PROCDEF  dispatcher [ Job, Dispatch :: JobData ] ( ) ::=
             Job ? job [[ isValidJob(job) ]]
        >->  Dispatch !job
        >->  dispatcher [ Job, Dispatch ]  ( )
ENDDEF

-- ----------------------------------------------------------------------------------------- --

MODELDEF Model ::=
    CHAN IN    Job   
    CHAN OUT   Finish

    BEHAVIOUR
        HIDE  [ Job2Proc :: JobData ]
        IN
                dispatcher [ Job, Job2Proc ]  ( )
            |[ Job2Proc ]|
                 processors [ Job2Proc, Finish ] ( 5 )
        NI
ENDDEF
-- ----------------------------------------------------------------------------------------- --

CHANDEF Channels ::=
    Job    :: JobData;
    Finish :: JobOut
ENDDEF

-- ----------------------------------------------------------------------------------------- --

CNECTDEF  Sut ::=
        CLIENTSOCK

        CHAN  OUT   Job                          HOST "localhost"  PORT 7890
        ENCODE      Job ? jd                     ->  ! toString(jd)
        
        CHAN  IN    Finish                       HOST "localhost"  PORT 7890
        DECODE      Finish ! fromString(s)       <-   ? s
ENDDEF

-- ----------------------------------------------------------------------------------------- --
--                                                                                           --
-- ----------------------------------------------------------------------------------------- --