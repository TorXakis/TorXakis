{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

TYPEDEF List ::= Nil
               | Cons{head::Int; tail::List}
ENDDEF

FUNCDEF add ( x :: Int; l :: List ) :: List ::=
    IF isNil(l)
    THEN Cons(x,Nil)
    ELSE Cons(head(l),add(x,tail(l)))
    FI
ENDDEF

CHANDEF Chans ::=
    Input, Output :: Int
ENDDEF

PROCDEF proc [Input, Output :: Int](l :: List) ::=
        Input ? x >-> proc [Input, Output] (add(x,l))
    ##  [[isCons(l)]] =>> Output ! head(l) >-> proc [Input, Output] (tail(l))
ENDDEF

MODELDEF Model ::=
    CHAN IN    Input
    CHAN OUT   Output

    BEHAVIOUR  
        proc [Input,Output] (Nil)
ENDDEF

CNECTDEF  Sut ::=
        CLIENTSOCK

        CHAN OUT  Input                        HOST "localhost"  PORT 9999
        ENCODE    Input ? i                    ->  ! toString(i)

        CHAN IN   Output                       HOST "localhost"  PORT 9999
        DECODE    Output ! fromString(s)       <-  ? s
ENDDEF

CNECTDEF  Sim ::=
        SERVERSOCK

        CHAN IN   Input                        HOST "localhost"  PORT 9999
        DECODE    Input ! fromString(s)        <-  ? s

        CHAN OUT  Output                       HOST "localhost"  PORT 9999
        ENCODE    Output ? i                   ->  ! toString(i)
ENDDEF
