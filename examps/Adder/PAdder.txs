{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}


-- ----------------------------------------------------------------------------------------- --
-- Model of (parallel) Adders, for one adder - Adder1 -, and for three adders - Adder3 -,
-- with inputs "Plus(i) x y" and "Minus(i) x y", and output "Result(i) z".
-- ----------------------------------------------------------------------------------------- --


TYPEDEF  Operation
    ::=
          Plus  { p1, p2 :: Int }
        | Minus { m1, m2 :: Int }
ENDDEF


FUNCDEF overflow (x :: Int) :: Bool
    ::=
        (x < -2147483648) \/ ( x > +2147483647)
ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  adder  [ Act :: Operation;  Res :: Int ] ( )
    ::=
           Act ?opn [[ IF isPlus(opn) THEN    not (overflow (p1(opn))) 
                                           /\ not (overflow (p2(opn))) 
                                           /\ not (overflow (p1(opn)+p2(opn)))
                                      ELSE False FI   ]]  >->  Res !p1(opn)+p2(opn)  >->  adder [ Act, Res ] ( )
        ##
           Act ?opn [[ IF isMinus(opn) THEN   not (overflow (m1(opn))) 
                                           /\ not (overflow (m2(opn))) 
                                           /\ not (overflow (m1(opn)-m2(opn)))
                                       ELSE False FI  ]]  >->  Res !m1(opn)-m2(opn)  >->  adder [ Act, Res ] ( )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


CHANDEF  Chans  ::=    Action, Action1, Action2, Action3  :: Operation
                     ; Result, Result1, Result2, Result3  :: Int
ENDDEF


-- ----------------------------------------------------------------------------------------- --


MODELDEF  Adder
    ::=
        CHAN IN    Action
        CHAN OUT   Result

        BEHAVIOUR  adder [ Action, Result ] ( )

ENDDEF


-- ----------------------------------------------------------------------------------------- --


PURPDEF  Purp1
    ::=
        CHAN IN    Action
        CHAN OUT   Result

        GOAL m1  ::=  Action !Plus (4,7)      >->  Result ?r  >->
                      Action !Minus(4,7)      >->  Result ?r  >->  HIT
        GOAL m2  ::=  Action !Plus (-1,-7)    >->  Result ?r  >->
                      Action !Minus(-1,-7)    >->  Result ?r  >->  HIT
        GOAL m3  ::=  Action !Plus (33,-42)   >->  Result ?r  >->
                      Action !Minus(33,-42)   >->  Result ?r  >->  HIT
        GOAL m4  ::=  Action !Plus (-17,123)  >->  Result ?r  >->
                      Action !Minus(-17,123)  >->  Result ?r  >->  HIT
ENDDEF


PROCDEF  p2  [ Act :: Operation; Res :: Int ] ( )  HIT
    ::=
                Act ?opn [[ IF isPlus(opn) THEN (p1(opn) > 100) /\ (p2(opn) > 100) ELSE False FI ]]
           >->  Res ? r
           >->  p2 [Act,Res] ()
        ##
                Act ?opn [[ IF isMinus(opn) THEN (m1(opn) < 0) /\ ((m2(opn) % 13) == 0) ELSE False FI ]]
           >->  Res ? r
           >->  p2 [Act,Res] ()
ENDDEF


PURPDEF  Purp2
    ::=
        CHAN IN    Action
        CHAN OUT   Result

        GOAL p2  ::=  p2 [ Action, Result ] ( )

ENDDEF


PROCDEF  p3  [ Act :: Operation;  Res :: Int ] ( r :: Int )  HIT
    ::=
                Act ?opn [[ IF isPlus(opn) THEN (p1(opn) >= r) /\ (p2(opn) == 2) ELSE False FI ]]
           >->  Res ?r  
           >->  p3 [Act, Res] ( r )
ENDDEF


PURPDEF  Purp3
    ::=
        CHAN IN    Action
        CHAN OUT   Result

        GOAL p3  ::=  p3 [ Action, Result ] ( 0 )

ENDDEF


PURPDEF  Replay
    ::=
        CHAN IN    Action
        CHAN OUT   Result

        GOAL replay  ::=  replayProc [ Action, Result ] ( )
ENDDEF


-- ----------------------------------------------------------------------------------------- --


CNECTDEF  Sut
    ::=
        CLIENTSOCK

        CHAN  OUT  Action                        HOST "localhost"  PORT 7890
        ENCODE     Action ? opn              ->  ! toString(opn)

        CHAN  IN   Result                        HOST "localhost"  PORT 7890
        DECODE     Result ! fromString(s)   <-   ? s

ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- ----------------------------------------------------------------------------------------- --
