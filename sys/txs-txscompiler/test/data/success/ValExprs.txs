{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}
FUNCDEF const(x, y :: Int) :: Int ::=   
    x
ENDDEF

FUNCDEF twenty(x :: Int) :: Int ::=
    20
ENDDEF

FUNCDEF let(x :: Int) :: Int ::=
    LET x = 10; y :: Bool = True IN x NI
ENDDEF

FUNCDEF let2(x :: Int; z :: Bool) :: Int ::=
    LET x = 10; y :: Bool = True; z = 9 IN z NI
ENDDEF

FUNCDEF let3(x :: Int; z :: Int) :: Int ::=
    LET x = 10; y :: Bool = True; z = 9 IN z NI
ENDDEF

FUNCDEF let4(x :: Bool; y :: Int; z :: Int) :: Int ::=
    LET a :: Int = y
    IN a
    NI
ENDDEF

FUNCDEF let5(x :: Bool; y :: Int; z :: Int) :: Int ::=
    LET a = y
    IN a
    NI
ENDDEF

FUNCDEF h() :: String ::=
    g
ENDDEF

CONSTDEF g :: String ::= "Hel" ++ "lo"
ENDDEF

FUNCDEF if(x :: Bool; y :: Int; z :: Int) :: Int ::=
    IF x THEN y ELSE z FI
ENDDEF

FUNCDEF if2(x :: Bool; y :: Int; z :: Int) :: Int ::=
    LET a :: Int = IF x THEN y ELSE z FI
    IN a
    NI
ENDDEF

FUNCDEF if3(x :: Bool; y :: Int; z :: Int) :: Int ::=
    LET a = IF x THEN y ELSE z FI
    IN a
    NI
ENDDEF

FUNCDEF if5(x :: Bool; y :: Int; z :: Int) :: Int ::=
    IF x THEN
        LET z = 10 IN z NI
    ELSE
        LET z = 20 IN z NI
    FI
ENDDEF

FUNCDEF if6(x :: Bool; y :: Int; z :: Int) :: Int ::=
    LET a = LET b = 10 IN b NI
    IN a
    NI
ENDDEF

FUNCDEF if7(x :: Bool; y :: Int; z :: Int) :: Int ::=
    LET a = IF x THEN
               LET z = 10 IN z NI
            ELSE
                LET z = 20 IN z NI
            FI
    IN a
    NI
ENDDEF

FUNCDEF if9(x :: Bool; y :: Int; z :: Int; w :: Bool) :: Int ::=
    IF x THEN
        LET a = IF x THEN
                   LET z = 10 IN z NI
                ELSE
                    IF LET g = 20 IN x NI THEN
                        LET z = 20 IN z NI
                    ELSE
                       33
                    FI
                FI
        IN a NI
    ELSE
        LET q = IF w THEN y ELSE LET b = 10 IN b NI FI
        IN q NI
    FI
ENDDEF

FUNCDEF plus(x :: Int; y :: Int) :: Int ::=
    x + y
ENDDEF

FUNCDEF plus2(x :: Int; y :: Int) :: Int ::=
    x + y + x
ENDDEF

FUNCDEF plus3(x :: Int; y :: Int) :: Int ::=
    x + plus(y, x)
ENDDEF

FUNCDEF plus4(x :: Int; y :: Int) :: Int ::=
    plus(y, x) + x
ENDDEF

FUNCDEF op(x :: Int; y :: Int) :: Int ::=
    x + y - x
ENDDEF

FUNCDEF concat(xs :: String; ys :: String) :: String ::=
    xs ++ ys
ENDDEF

FUNCDEF concat2(xs :: String; ys :: String) :: String ::=
     ys ++ concat (xs, ys)
ENDDEF

FUNCDEF composedOps(x :: Int; y :: Int; z :: Int) :: Int ::=
    x + x * y + z / x - 10 
ENDDEF

FUNCDEF composedOps2(x :: Int; y :: Int; z :: Int) :: Int ::=
    IF x == y
    THEN x + x * y + z / x - 10
    ELSE 203
    FI
ENDDEF

FUNCDEF composedOps3(x :: Int; y :: Int; z :: Int) :: Int ::=
    x + x * (y + (z + y))
ENDDEF

FUNCDEF composedOps4(x :: Int; y :: Int; z :: Int) :: Int ::=
    x + x * (y + (IF x < y THEN z + y ELSE x - y FI))
ENDDEF

FUNCDEF composedOps5(x :: Int; y :: Int; z :: Int) :: Int ::=
    x + x * (y + (
      IF x < y THEN
           LET q = IF z > 1 THEN 10 ELSE 0 FI; p = 20 IN z + y + p * q NI
      ELSE
          x - y
      FI
      ))
ENDDEF

FUNCDEF composedOps6(x :: Int; y :: Int; z :: Int) :: Int ::=
    IF LET r = x + x * (y + (
          IF x < y THEN
               LET q = IF z > 1 THEN 10 ELSE 0 FI; p = 20 IN z + y + p * q NI
          ELSE
              x - y
          FI
          ))
        IN r NI > 0
    THEN
        IF z < 1 THEN x ELSE y FI
    ELSE
        15
    FI
ENDDEF

FUNCDEF undefined() :: Int ::=
    undefined()
ENDDEF

FUNCDEF undefined2() :: Int ::=
    undefined2() + undefined2()
ENDDEF

FUNCDEF undefined3(y :: Int) :: Int ::=
    undefined3(y) * undefined3(y) + undefined3(y) * undefined3(y)
ENDDEF

FUNCDEF someFormula(x, y :: Int) :: Int ::=
    x + y * x + (y - x)
ENDDEF

FUNCDEF soundSimplify() :: Int ::=
    someFormula(undefined3(4), undefined3(5))
ENDDEF

TYPEDEF Pair ::= Pair { fst, snd :: Int } ENDDEF

-- | Because 'TriPair' is more fun that 'Tuple'.
TYPEDEF TriPair ::= TriPair { fst, snd, trd :: Int } ENDDEF

FUNCDEF composedOps4(p :: Pair) :: Int ::=
        fst(p) + snd(p)
ENDDEF

FUNCDEF composedOps5(p :: TriPair) :: Int ::=
        fst(p) + snd(p) + trd(p)
ENDDEF

FUNCDEF stringy() :: String ::=
        fromXml("Hello")
ENDDEF

FUNCDEF stringyPair() :: String ::=
    fromXml("Hello") ++ fromXml("World")
ENDDEF

FUNCDEF foo() :: Int ::=
   0
ENDDEF

FUNCDEF foo() :: String ::=
   "bar"
ENDDEF

CONSTDEF
    xx :: Int ::= 3
ENDDEF

-- TODO: for now we comment this one, since we're simplifying more than the current compiler.
--
-- See https://github.com/TorXakis/TorXakis/issues/722
--
-- FUNCDEF f():: Int ::=
--     xx + xx + (LET y = IF gg < 100 THEN gg ELSE xx FI IN 10 * gg NI)
-- ENDDEF

FUNCDEF gg() :: Int ::=
    xx * 10 + gg()
ENDDEF

FUNCDEF if10(x :: Bool; y :: Int; z :: Int; w :: Bool) :: Int ::=
    LET a = IF x THEN 44
            ELSE fromString("33")
            FI
    IN a NI
ENDDEF


FUNCDEF if11(x :: Bool; y :: Int; z :: Int; w :: Bool) :: Int ::=
    LET t = LET a = IF x THEN 44
                    ELSE fromString("33")
                    FI
            IN a NI
    IN t + fromString("Boom!") NI
ENDDEF

FUNCDEF composedOps50(x :: Int; y :: Int; z :: Int) :: Int ::=
    LET q = IF t() THEN 10 ELSE 0 FI
    IN q NI
ENDDEF

CONSTDEF t :: Bool ::= True  ENDDEF

FUNCDEF if12() :: String ::=
    overloaded("Boom!")
ENDDEF

FUNCDEF overloaded(x :: Int) :: String ::=
    "Is an integer!"
ENDDEF

FUNCDEF overloaded(x :: String) :: String ::=
    "Is a string!"
ENDDEF

FUNCDEF if13() :: Int ::=
    IF LET s = "True"; f = False IN fromString(s) \/ f NI
    THEN 1 + coerce("Boom!") + fromString("22")
    ELSE 845 + fromString(toString(if13()) ++ "934")
    FI
ENDDEF

FUNCDEF coerce(x :: String) :: Int ::=
    33
ENDDEF

FUNCDEF coerce(x :: String) :: String ::=
    x
ENDDEF


FUNCDEF isValid_Person (p :: Person) :: Bool ::=
       strinre (firstName(p), REGEX ('[A-Z][a-z]*'))
    /\ strinre (lastName(p), REGEX ('[A-Z][a-z]*'))
    /\ (1 <= dayOfBirth(p)) /\ (dayOfBirth(p) <= 31)
    /\ (1 <= monthOfBirth(p)) /\ (monthOfBirth(p) <= 12)
ENDDEF

TYPEDEF Person ::=
    Person { sex :: Sex 
           ; firstName, lastName :: String
           ; dayOfBirth, monthOfBirth :: Int
           }
ENDDEF

TYPEDEF Sex ::= Male | Female ENDDEF

FUNCDEF isValid_string ( x :: String ) :: Bool ::= strinre(x,REGEX('[A-Z]*')) ENDDEF  -- newline not allowed in socket communication, non printable characters are problematic 


TYPEDEF  JobData  ::=  JobData  {  jobId          :: Int
                                ;  jobDescription :: String
                                ;  x, y           :: Int
                                }
ENDDEF


FUNCDEF  isValidJob ( jobdata :: JobData )  :: Bool ::=
           ( jobId(jobdata) > 0 ) /\ ( ( jobId(jobdata) % 2 ) == 0 )
       /\  strinre ( jobDescription(jobdata), REGEX('[A-Z]{2}[0-9][a-z]*') )
       /\  ( x(jobdata) > 0 )
       /\  ( y(jobdata) > 0 )
ENDDEF

-- | TODO: both compilers cannot handle this. Do we want to handle this case as
-- | well? It is going to be very challenging.
--
-- FUNCDEF if10(x :: Bool; y :: Int; z :: Int; w :: Bool) :: String ::=
--     LET a = IF x THEN fromString("33")
--             ELSE fromString("33")
--             FI;
--         b = IF x THEN "Foo"
--             ELSE fromString("33")
--             FI
--     IN a ++ b NI
-- ENDDEF


-- | 'swap' will return the value 2*b + a where a and b refer to the
-- | parameters.
FUNCDEF swap (a, b :: Int) :: Int ::=
    LET a = b, b = a IN 2 * a + b NI
ENDDEF

-- | 'swap2' will return the value 3* b where b refers to the second parameter.
FUNCDEF swap2 (a,b :: Int) :: Int ::=
    LET a = b; b = a IN 2*a + b NI
ENDDEF

-- This should not fail since the types of v and w will be inferred
-- sequentially.
--
FUNCDEF let4(x :: Int) :: Int ::=
    LET v = x; w = v IN
        w
    NI
ENDDEF

-- Example of mutual recursion.
FUNCDEF ping() :: Int ::=
    pong()
ENDDEF

FUNCDEF pong() :: Int ::=
    ping()
ENDDEF

-- TODO: it seems TorXakis cannot handle this. Could the new compiler?
-- FUNCDEF j(g :: String) :: String ::=
--     g
-- ENDDEF

-- This results in an:
--
-- >>  error, called at .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/TxsHappy.hs:2593:541 in front-0.2.1.0-IN8pwRKbkji3Hd0yYBRsG1:TxsHappy
--
-- in TorXakis.
-- FUNCDEF letParallel(x :: Int) :: Int ::=
--     LET v = x, w = v IN
--         w
--     NI
-- ENDDEF
-- 
-- FUNCDEF swap(x :: Int) :: Int ::=
--     LET a = b, b = a IN
--         a
--     NI
-- ENDDEF
