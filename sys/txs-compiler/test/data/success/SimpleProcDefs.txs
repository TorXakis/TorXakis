PROCDEF stopper[X :: Int; A]() ::=
    STOP
ENDDEF

PROCDEF foo[X, Y :: Int; Z :: String; A, B, C](x :: Int; b, c :: Bool) ::=
    STOP
ENDDEF

PROCDEF funcLike[Uh](x :: Int; b, c :: Bool) ::=
    STOP
ENDDEF

PROCDEF boring[Boh]() ::=
    STOP
ENDDEF

PROCDEF stopper2[X :: Int # Int]() ::=
    STOP
ENDDEF

PROCDEF stopper3[X, Y :: Int # Int; Z :: String; A, B](x:: String) ::=
    STOP
ENDDEF

PROCDEF simple[X :: Int]() ::=
    X ! 1
ENDDEF

PROCDEF exiter[X :: Int]() EXIT Int # Int ::=
    EXIT ! 0 ! 1
ENDDEF

PROCDEF ap0[X, Y :: Int](x :: Int) ::=
    Y ? v | X ! 1
    >-> X ! x * v
ENDDEF

PROCDEF ap1[M :: String; N :: String; A :: String](exp :: String) ::=
    M ? exp | N ? rn [[ exp == rn ]] >-> A ! "Success!"
ENDDEF

PROCDEF ap2[In :: Int; Out :: String # String]() ::=
        In ? v
    >-> Out ! "Boom" ! "Bang" [[v == 0]]
    >-> In ? w
    >-> Out ! "Uh?" ! "Ah!" [[v == 1]]
ENDDEF

PROCDEF ap2[In :: Int; Out :: String # String](e :: String) HIT ::=
        In ? v
    >-> Out ! "Boom" ? z [[z == e]]
    >-> HIT
    >-> In ? w
    >-> Out ! "Uh?" ! "Ah!" [[v == 1]]
ENDDEF

PROCDEF ap2[In :: Int; Out :: String # String]() HIT ::=
        In ? v
    >-> ISTEP        
    >-> Out ! "Boom" ! "Bang" [[v == 0]]
    >-> MISS
    >-> In ? w
    >-> QSTEP
    >-> Out ! "Uh?" ! "Ah!" [[v == 1]]
ENDDEF

CHANDEF WhyDoYouHaveANameAtAll ::=
    Ping;
    Pong :: Int # Int;    
    Peng, Pung :: String # Bool
ENDDEF

MODELDEF Stopper2 ::=
    CHAN IN Pong
    CHAN OUT
    BEHAVIOUR
    Pong ! 2 ! 2
ENDDEF

MODELDEF Pinger ::=
    CHAN IN Ping
    CHAN OUT
    BEHAVIOUR Ping >-> STOP
ENDDEF

FUNCDEF inc(x :: Int) :: Int ::=
    x + 1
ENDDEF

CONSTDEF
    one :: Int ::= 1;
    two :: String ::= "two"
ENDDEF

PROCDEF shadower[In, Out :: Int](x::Int) ::=
        In ? x >-> Out ! x + 1
    >-> In ? x >-> Out ! inc(x)
    >-> In ? x >-> Out ! x + one
ENDDEF

CHANDEF Blah ::=
    In, Out :: Int
ENDDEF

PROCDEF letter[In, Out :: Int]() ::=
    LET y = 20 IN In ? x >-> Out ! x * y NI
ENDDEF

PROCDEF letter2[In, Out :: Int]() ::=
   In ? x >-> LET y = x + 1 IN Out ! y NI --  ||| Out ! 2
ENDDEF

PROCDEF letter3[In, Out :: Int](x :: Int) ::=
   In ? x >-> LET y = x + 1 IN Out ! y NI --  ||| Out ! 2
ENDDEF

PROCDEF overloaded[X :: String; Out :: String]() ::=
    Out ! "X ~ String"
ENDDEF


PROCDEF overloaded[X :: Int; Out :: String]() ::=
    Out ! "X ~ Int"
ENDDEF

CHANDEF X ::=
    S :: String;
    I :: Int;
    OutS :: String
ENDDEF    

MODELDEF Overloader ::=
    CHAN IN S, I
    CHAN OUT OutS
    BEHAVIOUR
        overloaded[S, OutS]()
ENDDEF

MODELDEF Overloader1 ::=
    CHAN IN S, I
    CHAN OUT OutS
    BEHAVIOUR
        overloaded[I, OutS]()
ENDDEF

MODELDEF Overloader2 ::=
    CHAN IN S, I
    CHAN OUT OutS
    BEHAVIOUR
        S ! "Here I go!" >-> overloaded[I, OutS]()
ENDDEF

PROCDEF overloaded1[OutS :: String](x :: String) ::=
    OutS ! "X ~ String"
ENDDEF

PROCDEF overloaded1[OutS :: String](x :: Int) ::=
    OutS ! "X ~ Int"
ENDDEF

PROCDEF overloadedFoo[OutS :: String]() ::=
        overloaded1[OutS](LET x = "foo" IN x NI)
ENDDEF

MODELDEF Overloader11 ::=
    CHAN IN S, I
    CHAN OUT OutS
    BEHAVIOUR
        overloaded1[OutS](33)
ENDDEF
