{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

TYPEDEF MemoryAccess ::= Read  { value :: Int }
                       | Write { newValue :: Int }
ENDDEF

PROCDEF memory [ Memory :: MemoryAccess ] ( value :: Int ) ::=
        Memory ! Read ( value )     >->  memory [Memory](value)
    ##
        Memory ? x [[ isWrite(x) ]] >->  memory [Memory](newValue(x))
ENDDEF


PROCDEF plus [ Memory :: MemoryAccess ] ( n :: Int ) EXIT ::=
    Memory ? x [[ isRead(x) ]] >->  Memory ! Write(value(x)+n)  >->  EXIT
ENDDEF

PROCDEF readWrite [ Memory :: MemoryAccess ] ( ) ::=
             plus [ Memory ](1)
         |||
             plus [ Memory ](2)
         |||
             plus [ Memory ](4)
     >>>
             Memory ? x [[ isRead(x) ]]  
         >-> Memory ! Write(0)
         >-> system [ Memory ] ( )
ENDDEF

PROCDEF system [ Memory :: MemoryAccess ] ( ) ::=
        memory [ Memory ] ( 0 )
    |[ Memory ]|
        readWrite [ Memory ] ( )
ENDDEF


CHANDEF Channels ::=
    Memory :: MemoryAccess
ENDDEF

MODELDEF Model ::= 
    CHAN IN   
    CHAN OUT  Memory
        
    BEHAVIOUR
              system [ Memory ] ( )
ENDDEF