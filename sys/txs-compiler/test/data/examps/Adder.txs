{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

-- ----------------------------------------------------------------------------------------- --
-- Model of (parallel) Adders, for one adder - Adder1 -, and for three adders - Adder3 -,
-- with inputs "Plus(i) x y" and "Minus(i) x y", and output "Result(i) z".
-- ----------------------------------------------------------------------------------------- --

TYPEDEF  Operation ::=
      Plus  { p1, p2 :: Int }
    | Minus { m1, m2 :: Int }
ENDDEF

FUNCDEF overflow (x :: Int) :: Bool ::=
    (x < -2147483648) \/ ( x > +2147483647)
ENDDEF
-- ----------------------------------------------------------------------------------------- --

PROCDEF  adder  [ Act :: Operation;  Res :: Int ] ( ) ::=
       Act ?opn [[ IF isPlus(opn) THEN    not (overflow (p1(opn))) 
                                       /\ not (overflow (p2(opn))) 
                                       /\ not (overflow (p1(opn)+p2(opn)))
                                  ELSE False FI ]]  >->  Res !p1(opn)+p2(opn)  >->  adder [ Act, Res ] ( )
    ##
       Act ?opn [[ IF isMinus(opn) THEN   not (overflow (m1(opn))) 
                                       /\ not (overflow (m2(opn))) 
                                       /\ not (overflow (m1(opn)-m2(opn)))
                                   ELSE False FI ]]  >->  Res !m1(opn)-m2(opn)  >->  adder [ Act, Res ] ( )
ENDDEF

-- ----------------------------------------------------------------------------------------- --

CHANDEF  Chans  ::=    Action, Action1, Action2, Action3  :: Operation
                     ; Result, Result1, Result2, Result3  :: Int
ENDDEF

-- ----------------------------------------------------------------------------------------- --

MODELDEF  Adder ::=
    CHAN IN    Action
    CHAN OUT   Result
    BEHAVIOUR  adder [ Action, Result ] ( )
ENDDEF

-- ----------------------------------------------------------------------------------------- --

MODELDEF  Adder3 ::=
        CHAN IN    Action1, Action2, Action3
        CHAN OUT   Result1, Result2, Result3

        BEHAVIOUR       adder [ Action1, Result1 ] ( )
                   |||
                        adder [ Action2, Result2 ] ( )
                   |||
                        adder [ Action3, Result3 ] ( )

ENDDEF

