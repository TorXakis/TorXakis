{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}


-- ----------------------------------------------------------------------------------------- --
-- Model of (parallel) Adder, with Mapper. Synchronous and asynchronous mapping examples
-- are included.
-- ----------------------------------------------------------------------------------------- --


CHANDEF  Channels
    ::=
        Plus, Minus :: Int # Int          ;
        Result      :: Int                ;
        Sin         :: String # Int # Int ;
        Sout        :: Int
ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  adder  [ Opt, Aft :: Int # Int;   Res :: Int ] ( )
    ::=
            Opt ?x ?y   >->   Res !x+y   >->   adder [ Opt, Aft, Res ] ( )
        ##
            Aft ?x ?y   >->   Res !x-y   >->   adder [ Opt, Aft, Res ] ( )
ENDDEF


MODELDEF  Adder
    ::=
        CHAN IN    Plus, Minus
        CHAN OUT   Result

        BEHAVIOUR  adder [ Plus, Minus, Result ] ( )

ENDDEF


-- ----------------------------------------------------------------------------------------- --


PROCDEF  mapperA [ Plus, Minus :: Int # Int; Result :: Int;
                   Sin :: String # Int # Int;  Sout :: Int ] ( )
    ::=
            -- Note that the two actions below define a mapper rule: actions of
            -- the form `Plus ? x ? y` will be mapped to a `Sin ! "Plus" ! x !
            -- y` action, and this is what will be observed by the SUT.
                 Plus ? x ? y         
            >->  Sin ! "Plus" ! x ! y
            >->  mapperA [ Plus, Minus, Result, Sin, Sout ] ( )
        ##
                 Minus ?x ?y
            >->  Sin ! "Minus" ! x ! y
            >->  mapperA [ Plus, Minus, Result, Sin, Sout ] ( )
        ##
                 Sout ? r 
            >->  Result ! r
            >->  mapperA [ Plus, Minus, Result, Sin, Sout ] ( )
ENDDEF


PROCDEF  mapperS [ Plus, Minus :: Int # Int; Result :: Int;
                   Sin :: String # Int # Int;  Sout :: Int ] ( )
    ::=
                 Plus ? x ? y  | Sin ! "Plus" ? xx ? yy  [[ x == xx, y == yy ]]
            >->  mapperS [ Plus, Minus, Result, Sin, Sout ] ( )
        ##
                 Minus ?x ?y | Sin ! "Minus" ? xx ? yy  [[ x == xx, y == yy ]]
            >->  mapperS [ Plus, Minus, Result, Sin, Sout ] ( )
        ##
                 Sout ? r | Result ? rr  [[ r == rr ]]
            >->  mapperS [ Plus, Minus, Result, Sin, Sout ] ( )
ENDDEF


{-
-- Asynchronous Mapping
MAPPERDEF  MapA
    ::=
        CHAN IN    Plus, Minus,
                   Sout
        CHAN OUT   Result,
                   Sin

        BEHAVIOUR  mapperA [ Plus, Minus, Result, Sin, Sout ] ( )

ENDDEF
-}

-- Synchronous Mapping
MAPPERDEF  MapS
    ::=
        CHAN IN    Plus, Minus,
                   Sout
        CHAN OUT   Result,
                   Sin
        -- The SYNC keyword here specifies which are the actions that will be
        -- observed in this behavior. For instance, we can observe `Plus |
        -- Sin`, `Minus | Sin` or `Sout | Result`, but not individual actions
        -- such as `Plus`, `Sin`, `Minus`, etc.
        -- 
        SYNC       { Plus | Sin },
                   { Minus | Sin },
                   { Sout | Result }

        BEHAVIOUR  mapperS [ Plus, Minus, Result, Sin, Sout ] ( )

ENDDEF


-- ----------------------------------------------------------------------------------------- --


CNECTDEF  Sut
    ::=
        CLIENTSOCK

        CHAN  OUT  Sin                      HOST "localhost"  PORT 7890
        ENCODE     Sin ?op ?x ?y        ->  !op++"("++(toString(x))++","++(toString(y))++")"

        CHAN  IN   Sout                     HOST "localhost"  PORT 7890
        DECODE     Sout !fromString(s)  <-  ?s

ENDDEF


-- ----------------------------------------------------------------------------------------- --
-- ----------------------------------------------------------------------------------------- --

