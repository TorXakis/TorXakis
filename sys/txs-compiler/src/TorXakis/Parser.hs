module TorXakis.Parser where

import           Text.ParserCombinators.Parsec.Language (haskell)
import           Data.Text (Text)

import           TorXakis.Compiler.Error (Error)

parse :: String -> Either Error ParsedDefs
parse = undefined

-- | TorXakis definitions generated by the parser.
data ParsedDefs = ParsedDefs
    { adts  :: [UADTDef]
    , fdefs :: [UFuncDef]
    } deriving (Eq, Show)

-- * TODO: take these types from the 'issue/565-newADTstructure' branch.

-- | Abstract data type definition. The parameter type represents the TorXakis
-- type of the ADT fields. For instance, the parser will return a
--
-- > ADTDef (Either Sort Text)
--
-- where if a field of an ADT has type Sort, it refers to a pre-existing type,
-- whereas if it has a type Text it refers to an ADT which does not exist yet
-- at the parsing stage.
--
data ADTDef sortRef = ADTDef
    deriving (Eq, Show)

type UType = Either Sort Text
type UADTDef = ADTDef UType

data Sort

-- | Function definition.
data FuncDef sortRef = FuncDef
    deriving (Eq, Show)

type UFuncDef = FuncDef UType
