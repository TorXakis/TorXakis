Trace and replay functionality
===============================

``TorXakis`` offers the possibility of writing the trace of a test, simulator,
or stepper run to a file. This trace can be used subsequently to replay a test,
which is useful in case a given error needs to be debugged. We illustrate this
by means of the `Adder
<https://github.com/TorXakis/TorXakis/blob/develop/examps/Adder/Adder.txs>`_
example.

Start the `Adder SUT
<https://github.com/TorXakis/TorXakis/tree/develop/examps/Adder>`_ and the run
``TorXakis``:

.. code-block:: text
                
  tester Adder SutConnection
  test 10

This will produce an output similar to this:

.. code-block:: text

  TXS >>  .....1: IN: Act { { ( Action, [ Minus(-2147481852,-2147474792) ] ) } }
  TXS >>  .....2: OUT: Act { { ( Result, [ -7060 ] ) } }
  TXS >>  .....3: IN: Act { { ( Action, [ Minus(-2147475550,-2147477794) ] ) } }
  TXS >>  .....4: OUT: Act { { ( Result, [ 2244 ] ) } }
  TXS >>  .....5: IN: Act { { ( Action, [ Plus(-2147474703,-2662) ] ) } }
  TXS >>  .....6: OUT: Act { { ( Result, [ -2147477365 ] ) } }
  TXS >>  .....7: IN: Act { { ( Action, [ Minus(-2147477744,-2147481994) ] ) } }
  TXS >>  .....8: OUT: Act { { ( Result, [ 4250 ] ) } }
  TXS >>  .....9: IN: Act { { ( Action, [ Minus(-2147473923,-2147481373) ] ) } }
  TXS >>  ....10: OUT: Act { { ( Result, [ 7450 ] ) } }
  TXS >>  PASS

Which corresponds with the output observed at the SUT:

.. code-block:: text

  Adders on port 7890 received input: Minus(-2147481852,-2147474792)
  -7060
  Adders on port 7890 received input: Minus(-2147475550,-2147477794)
  2244
  Adders on port 7890 received input: Plus(-2147474703,-2662)
  -2147477365
  Adders on port 7890 received input: Minus(-2147477744,-2147481994)
  4250
  Adders on port 7890 received input: Minus(-2147473923,-2147481373)
  7450
  
Then save the trace and exit ``TorXakis``:

.. code-block:: text

  trace purp $> AdderPurpose.txs
  exit

The ``trace`` command will produce a ``TorXakis`` source file with the
following contents:

.. code-block:: text

   PROCDEF replayProc [Action :: Operation; Result :: Int]() HIT
   ::=
   Action ! Minus(-2147481852,-2147474792)
   >-> Result ! -7060
   >-> Action ! Minus(-2147475550,-2147477794)
   >-> Result ! 2244
   >-> Action ! Plus(-2147474703,-2662)
   >-> Result ! -2147477365
   >-> Action ! Minus(-2147477744,-2147481994)
   >-> Result ! 4250
   >-> Action ! Minus(-2147473923,-2147481373)
   >-> Result ! 7450
   >-> HIT
   ENDDEF

Here we see that the actions on the ``replayProc`` process correspond with the
output we observed when running the tests.

Using the trace (in the form a process) generated by ``TorXakis``, together
with an `AdderReplay
<https://github.com/TorXakis/TorXakis/blob/develop/examps/Adder/AdderReplay.txs>`_
we can replay this test by restarting the SUT and executing the following
commands in the ``TorXakis`` command-line:

.. code-block:: text

   tester Adder AdderReplay SutConnection
   test 20

This will produce the following output:

.. code-block:: text

   TXS <<  test 20
   TXS >>  .....1: IN: Act { { ( Action, [ Minus(-2147481852,-2147474792) ] ) } }
   TXS >>  .....2: OUT: Act { { ( Result, [ -7060 ] ) } }
   TXS >>  .....3: IN: Act { { ( Action, [ Minus(-2147475550,-2147477794) ] ) } }
   TXS >>  .....4: OUT: Act { { ( Result, [ 2244 ] ) } }
   TXS >>  .....5: IN: Act { { ( Action, [ Plus(-2147474703,-2662) ] ) } }
   TXS >>  .....6: OUT: Act { { ( Result, [ -2147477365 ] ) } }
   TXS >>  .....7: OUT: No Output (Quiescence)
   TXS >>  .....8: IN: Act { { ( Action, [ Minus(-2147477744,-2147481994) ] ) } }
   TXS >>  .....9: OUT: Act { { ( Result, [ 4250 ] ) } }
   TXS >>  ....10: IN: Act { { ( Action, [ Minus(-2147473923,-2147481373) ] ) } }
   TXS >>  ....11: OUT: Act { { ( Result, [ 7450 ] ) } }
   TXS >>  ....12: OUT: No Output (Quiescence)
   TXS >>  Goal replayAdd: Hit
   TXS >>  PASS

Since we ran the ``Adder`` model with an ``AdderReplay`` purpose the possible
actions of the model are constrained by the latter, allowing us to replay the
behavior observed when running the tests. Note also that the test strategy with
a purpose (``PURPDEF``) is a bit different, since it randomly test for
quiescence (i.e., the SUT must produce no output), and ``TorXakis`` tests
whether that is really the case.
