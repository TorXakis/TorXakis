TxsRoot: TorXakisDefns
TorXakisDefns :
              | TorXakisDefns TorXakisDefn
TorXakisDefn
              : TypeDefList

              | FuncDefList

              | ConstDefList

              | ProcDefList

              | StautDef

              | ChannelDef

              | ModelDef

              | PurpDef

              | MapperDef

              | CnectDef

TypeDefList : TYPEDEF TypeDefs EndDef


TypeDefs: TypeDef
        | TypeDefs ";" TypeDef


TypeDef: capid "::=" Constructors

Constructors :
             | Constructor
             | Constructors "|" Constructor

Constructor : capid FieldList

FieldList :
          | "{" "}"
          | "{" Fields "}"

Fields : Field
       | Fields ";" Field


Field : NeSmallIdList OfSort


FuncDefList : FUNCDEF FuncDefs EndDef


FuncDefs : FuncDef
         | FuncDefs ";" FuncDef


ExFuncDef: SIGS UNID FuncDef

FuncDef: smallid FormalVars OfSort "::=" ValExpr
       | operator FormalVars OfSort "::=" ValExpr

ConstDefList: CONSTDEF ConstDefs EndDef

ConstDefs : ConstDef
          | ConstDefs ";" ConstDef


ExConstDef : SIGS UNID ConstDef

ConstDef : smallid OfSort "::=" ValExpr

ProcDefList: PROCDEF ProcDefs EndDef

ProcDefs : ProcDef
         | ProcDefs ";" ProcDef

ProcDef : Id FormalChannels FormalVars ExitKind "::=" BehaviourExpr

StautDef: STAUTDEF Id FormalChannels FormalVars ExitKind "::=" StautItemList EndDef

ChannelDef : CHANDEF capid "::=" ChannelDeclList EndDef

ModelDef : MODELDEF capid "::=" CHAN IN ChannelUsedList CHAN OUT ChannelUsedList
          SyncChannels BEHAVIOUR BehaviourExpr EndDef
PurpDef : PURPDEF capid "::=" CHAN IN ChannelUsedList CHAN OUT ChannelUsedList
          SyncChannels TestGoals EndDef

TestGoals : TestGoal
          | TestGoals TestGoal

TestGoal : GOAL Id "::=" BehaviourExpr

MapperDef : MAPPERDEF capid "::=" CHAN IN ChannelUsedList CHAN OUT ChannelUsedList
            SyncChannels BEHAVIOUR BehaviourExpr EndDef
CnectDef: CNECTDEF capid "::=" ConnectionType ConnectionItems EndDef

ConnectionType : CLIENTSOCK
               | SERVERSOCK

ConnectionItems :
                | ConnectionItems ConnectionItem

ConnectionItem : ConnectionOut
               | ConnectionIn
               | Encoding
               | Decoding

ConnectionOut : CHAN OUT ChannelUsedList HOST string PORT integer

ConnectionIn: CHAN IN ChannelUsedList HOST string PORT integer

Encoding : ENCODE Offer "->" ChannelOffer

Decoding : DECODE Offer "<-" ChannelOffer

SyncChannels :
             | SYNC ChannelSets

ChannelSets : ChannelSet
            | ChannelSets "," ChannelSet

ChannelSet : "{" NeBarCapIdList "}"

ExitKind :
         | EXIT OfSorts
         | HIT

OfSort : "::" capid

OfSorts : SharpCapIdList

NeOfSorts : NeSharpCapIdList

FormalChannels : "[" ChannelDeclList "]"

ChannelDeclList :
                | ChannelDecls
                | ChannelDeclList ";" ChannelDecls

ExChannelDecls : SIGS UNID ChannelDecls

ChannelDecls : NeIdList
             | NeIdList "::" NeOfSorts

FormalVars : "(" ")"
           | "(" VarDeclList ")"

ExVarDeclList : SIGS UNID VarDeclList

VarDeclList : VarDecls
            | VarDeclList ";" VarDecls

VarDecls : NeSmallIdList OfSort

VarDecl : smallid OfSort

ExBehaviourExpr : SIGS CHANENV VARENV UNID BehaviourExpr

BehaviourExpr: BehaviourExpr1

BehaviourExpr1 : BehaviourExpr1 ">>>" BehaviourExpr2
               | BehaviourExpr1 ">>>" ACCEPT ChannelOffList IN BehaviourExpr2 EndIn
               | BehaviourExpr1 "[>>" BehaviourExpr2
               | BehaviourExpr1 "[><" BehaviourExpr2
               | BehaviourExpr2

BehaviourExpr2: BehaviourExpr2 "||" BehaviourExpr3
               | BehaviourExpr2 "|||" BehaviourExpr3
               | BehaviourExpr2 "|[" IdList "]|" BehaviourExpr3
               | BehaviourExpr3

BehaviourExpr3 : BehaviourExpr3 "##" BehaviourExpr4
               | BehaviourExpr4

BehaviourExpr4 : "[[" NeValExprs "]]" "=>>" BehaviourExpr4
               | PrefOfferList ">->" BehaviourExpr4
               | PrefOfferList "[[" NeValExprs "]]" ">->" BehaviourExpr4
               | PrefOfferList
               | PrefOfferList "[[" NeValExprs "]]"
               | STOP
               | Id ActualChannels ActualValExprs
               | LET NeValueDefList IN BehaviourExpr1 EndIn
               | HIDE FormalChannels IN BehaviourExpr1 EndIn
               | "(" BehaviourExpr1 ")"

ActualChannels: "[" ChannelUsedList "]"

ChannelUsedList: IdList

ActualValExprs : "(" ValExprs ")"

ExPrefOfferList : SIGS CHANENV VARENV UNID PrefOfferList

PrefOfferList : ISTEP
              | QSTEP
              | HIT
              | MISS
              | NeOfferList
              | "{" OfferList "}"

OfferList :
          | NeOfferList

NeOfferList : Offer
            | NeOfferList "|" Offer

Offer : EXIT ChannelOffList
      | Id ChannelOffList

ChannelOffList :
               | ChannelOffer ChannelOffList

ChannelOffer : "?" VarDecl
             | "?" smallid
             | "!" ValExpr

ExValExpr : SIGS VARENV UNID ValExpr

ValExpr : ValExpr1

ValExpr1 : LET NeValueDefList IN ValExpr1 EndIn
         | IF NeValExprs THEN ValExpr1 ELSE ValExpr1 EndIf
         | ValExpr1 operator ValExpr2
         | ValExpr2 OfSort
         | ValExpr2

ValExpr2 : smallid
         | smallid "(" ValExprs ")"
         | operator ValExpr2
         | capid
         | capid "(" ValExprs  ")"
         | Constant
         | "(" ValExpr1 ")"
         | ANY

ValExprs :
         | NeValExprs

NeValExprs : ValExpr1
           | NeValExprs "," ValExpr1

NeValueDefList : NeValueDefs
               | NeValueDefs ";" NeValueDefList

ExNeValueDefs : SIGS VARENV UNID NeValueDefs

NeValueDefs : ValueDef
            | NeValueDefs "," ValueDef

ValueDef : smallid OfSort "=" ValExpr
         | smallid "=" ValExpr

Constant : True
         | False
         | integer
         | string
         | REGEX "(" regexval ")"

Id : capid
   | smallid

IdList :
       | NeIdList

NeIdList : Id
         | NeIdList "," Id

CapIdList :
          | NeCapIdList

NeCapIdList : capid
            | NeCapIdList "," capid

SharpCapIdList :
               | NeSharpCapIdList

NeSharpCapIdList : capid
                 | NeSharpCapIdList "#" capid

NeBarCapIdList : capid
               | NeBarCapIdList "|" capid











NeSmallIdList

              : smallid

              | NeSmallIdList "," smallid







StautItemList
















              : StautItems

                ;  where
                     let ( sts, vars, trs, inits, venvs ) = $1
                      in if  not $ null $ doubles (map ( sig . IdStat ) sts)
                           then error $ "\nTXS1011: " ++ "Double defined states: " ++
                                        (show (Sigs.pro $$.inhSigs)) ++ "\n" else
                         if  not $ null $ doubles ( map ( sig . IdVar ) (vars ++ $$.inhVarSigs) )
                           then error $ "\nTXS1012: " ++ "Double defined state/parameter vars: "
                                        ++ (show (Sigs.pro $$.inhSigs)) ++ "\n"
                           else ()
                }

StautItems

















              : StautItem

              | StautItems StautItem


StautItem

















              : StateItem

              | VarItem

              | InitItem

              | TransItem


StateItem







              : STATE NeIdList


VarItem








              : VAR

              | VAR VarDeclList


InitItem












              : INIT StateRef UpdateList


TransItem














              : TRANS Transitions


Transitions














              : Transition

              | Transitions Transition

              | Transitions ";" Transition


Transition















              : StateRef "->" PrefOfferList Constraints UpdateList "->" StateRef

              | FROM StateRef VIA PrefOfferList Constraints UpdateList TO StateRef

              | FROM StateRef TO StateRef VIA PrefOfferList Constraints UpdateList END


Constraints









              :

              | "[[" NeValExprs "]]"


UpdateList











              :

              | "{" "}"

              | Updates

              | "{" Updates "}"


Updates










              : Update

              | Updates ";" Update


Update














              : NeSmallIdList ":=" ValExpr

                                   | nm <- $1
                                   ]
                ;  $3.inhSigs      = $$.inhSigs
                ;  $3.inhVarSigs   = $$.inhVarSigs
                ;  $3.inhSolvSort  = case List.nub ( map varsort $$.synVarSigs ) of

                ;  $$ = Map.fromList [ (vid, $3) | vid <- $$.synVarSigs ]
                ;  where let dbls = doubles $1
                          in if null dbls then () else
                             error $ "\nTXS1133: " ++ "Double updated state variables : " ++
                                     (show dbls)++"\n"
                }

StateRef






              : Id

                }
